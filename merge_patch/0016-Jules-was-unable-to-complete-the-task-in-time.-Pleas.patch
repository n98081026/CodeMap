From 4679f3a1dc5a2ee2efed4ad61cd84d13edb9a9a4 Mon Sep 17 00:00:00 2001
From: "google-labs-jules[bot]"
 <161369871+google-labs-jules[bot]@users.noreply.github.com>
Date: Sat, 14 Jun 2025 22:09:25 +0000
Subject: [PATCH 16/27] Jules was unable to complete the task in time. Please
 review the work done so far and provide feedback for Jules to continue.

---
 src/ai/flows/ai-tidy-up-selection.ts          | 111 ++++++++++++++++++
 src/ai/flows/index.ts                         |   1 +
 src/components/concept-map/editor-toolbar.tsx |  32 ++++-
 3 files changed, 140 insertions(+), 4 deletions(-)
 create mode 100644 src/ai/flows/ai-tidy-up-selection.ts

diff --git a/src/ai/flows/ai-tidy-up-selection.ts b/src/ai/flows/ai-tidy-up-selection.ts
new file mode 100644
index 0000000..9e47ac0
--- /dev/null
+++ b/src/ai/flows/ai-tidy-up-selection.ts
@@ -0,0 +1,111 @@
+// src/ai/flows/ai-tidy-up-selection.ts
+'use server';
+
+import { ai } from '@/ai/genkit';
+import { z } from 'genkit';
+
+// 1. Define Input Schema
+const NodeLayoutInfoSchema = z.object({
+  id: z.string(),
+  x: z.number().describe("Current X coordinate (top-left) of the node."),
+  y: z.number().describe("Current Y coordinate (top-left) of the node."),
+  width: z.number().describe("Width of the node."),
+  height: z.number().describe("Height of the node."),
+  text: z.string().optional().describe("Node label/text content, for contextual understanding."),
+  type: z.string().optional().describe("Node type, for contextual understanding.")
+});
+
+export const AiTidyUpSelectionInputSchema = z.object({
+  nodes: z.array(NodeLayoutInfoSchema).min(2).describe("Array of 2 or more selected nodes to be tidied.")
+  // Consider adding canvasWidth/Height or bounding box of selection if proven necessary for better AI results later.
+});
+export type AiTidyUpSelectionInput = z.infer<typeof AiTidyUpSelectionInputSchema>;
+
+// 2. Define Output Schema
+const NodeNewPositionSchema = z.object({
+  id: z.string().describe("ID of the node."),
+  x: z.number().describe("New suggested X coordinate (top-left) for the node."),
+  y: z.number().describe("New suggested Y coordinate (top-left) for the node.")
+});
+
+export const AiTidyUpSelectionOutputSchema = z.object({
+  newPositions: z.array(NodeNewPositionSchema).describe("Array of nodes with their new suggested positions.")
+});
+export type AiTidyUpSelectionOutput = z.infer<typeof AiTidyUpSelectionOutputSchema>;
+
+// 3. Define the Genkit Prompt
+const aiTidyUpSelectionPrompt = ai.definePrompt({
+  name: 'aiTidyUpSelectionPrompt',
+  input: { schema: AiTidyUpSelectionInputSchema },
+  output: { schema: AiTidyUpSelectionOutputSchema },
+  prompt: `You are an AI assistant specializing in diagram layout optimization for concept maps.
+Given a list of selected concept map nodes, including their current positions (x, y for top-left corner), dimensions (width, height), and optionally their text content and type:
+
+Your task is to calculate new (x, y) positions for these nodes to make them more organized, aligned, and readable.
+
+Consider the following layout principles:
+- **Alignment:** Align nodes along common horizontal or vertical axes (e.g., align centers or edges).
+- **Distribution:** Distribute nodes evenly, ensuring consistent spacing between them.
+- **Overlap Reduction:** Nodes should NOT overlap after rearrangement.
+- **Proximity/Grouping:** Try to maintain the relative spatial relationships of the original selection if logical (e.g., nodes that were close should generally remain relatively close).
+- **Compactness:** Aim for a reasonably compact arrangement of the selected group.
+- **Minimal Movement:** While clarity is key, try to achieve a tidy layout with minimal overall displacement from original positions if possible without sacrificing readability or the above principles.
+
+The (0,0) coordinate is the top-left of the canvas. Only provide new positions for the nodes listed in the input.
+
+Nodes to rearrange:
+{{#each nodes}}
+- Node ID: {{id}}
+  Current Position: (x: {{x}}, y: {{y}})
+  Dimensions: (width: {{width}}, height: {{height}})
+  {{#if text}}Text: "{{text}}"{{/if}}
+  {{#if type}}Type: "{{type}}"{{/if}}
+{{/each}}
+
+Return an array of objects, where each object contains the "id" of a node and its new "x" and "y" coordinates.
+Example output format:
+{
+  "newPositions": [
+    { "id": "node1_id", "x": 150, "y": 100 },
+    { "id": "node2_id", "x": 150, "y": 200 },
+    { "id": "node3_id", "x": 300, "y": 150 }
+  ]
+}
+`,
+});
+
+// 4. Define the Genkit Flow
+export const aiTidyUpSelectionFlow = ai.defineFlow(
+  {
+    name: 'aiTidyUpSelectionFlow',
+    inputSchema: AiTidyUpSelectionInputSchema,
+    outputSchema: AiTidyUpSelectionOutputSchema,
+  },
+  async (input) => {
+    if (input.nodes.length < 2) {
+      // Should be caught by Zod schema min(2) but good to have a check.
+      // Return original positions if fewer than 2 nodes (nothing to tidy).
+      return { newPositions: input.nodes.map(n => ({ id: n.id, x: n.x, y: n.y })) };
+    }
+
+    const { output } = await aiTidyUpSelectionPrompt(input);
+    if (!output || !output.newPositions || output.newPositions.length !== input.nodes.length) {
+      console.error("AI Tidy Up: Output missing or newPositions array length mismatch.", output);
+      // Fallback: return original positions if AI output is invalid
+      // This prevents map disruption if AI fails.
+      return { newPositions: input.nodes.map(n => ({ id: n.id, x: n.x, y: n.y })) };
+    }
+
+    // Further validation: ensure all original node IDs are present in the output
+    const originalNodeIds = new Set(input.nodes.map(n => n.id));
+    const outputNodeIds = new Set(output.newPositions.map(p => p.id));
+    if (originalNodeIds.size !== outputNodeIds.size || !Array.from(originalNodeIds).every(id => outputNodeIds.has(id))) {
+        console.error("AI Tidy Up: Output newPositions do not contain all original node IDs.");
+        return { newPositions: input.nodes.map(n => ({ id: n.id, x: n.x, y: n.y })) };
+    }
+
+    return output;
+  }
+);
+
+// Ensure this new flow is exported from src/ai/flows/index.ts in a subsequent step.
diff --git a/src/ai/flows/index.ts b/src/ai/flows/index.ts
index 0e3175d..1c12c40 100644
--- a/src/ai/flows/index.ts
+++ b/src/ai/flows/index.ts
@@ -11,6 +11,7 @@ export * from './summarize-nodes-flow';
 export * from './suggest-edge-label'; // Added new flow
 export * from './refine-node-suggestion'; // Added new flow for refining suggestions
 export * from './suggest-intermediate-node'; // Added new flow for intermediate nodes
+export * from './ai-tidy-up-selection'; // Added new flow for tidying selection
 
 // IMPORTANT: rewrite-node-content-logic.ts (formerly rewrite-node-content-flow.ts) and its exports
 // are NOT exported from this barrel file due to persistent module resolution issues.
diff --git a/src/components/concept-map/editor-toolbar.tsx b/src/components/concept-map/editor-toolbar.tsx
index ce77553..2466340 100644
--- a/src/components/concept-map/editor-toolbar.tsx
+++ b/src/components/concept-map/editor-toolbar.tsx
@@ -5,8 +5,9 @@ import { Button } from "@/components/ui/button";
 import { Separator } from "@/components/ui/separator";
 import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
 import {
-  FilePlus, Save, Upload, Download, Undo, Redo, PlusSquare, Spline, Shuffle, // Added Shuffle
-  SearchCode, Lightbulb, Brain, Loader2, Settings2, BotMessageSquare, Sparkles, TextSearch, ListCollapse, ScrollText
+  FilePlus, Save, Upload, Download, Undo, Redo, PlusSquare, Spline, Shuffle,
+  SearchCode, Lightbulb, Brain, Loader2, Settings2, BotMessageSquare, Sparkles, TextSearch, ListCollapse, ScrollText,
+  AlignHorizontalDistributeCenter // Added icon
 } from "lucide-react";
 import { useToast } from "@/hooks/use-toast";
 import { cn } from "@/lib/utils";
@@ -40,7 +41,8 @@ interface EditorToolbarProps {
   canRedo: boolean;
   selectedNodeId: string | null;
   numMultiSelectedNodes: number;
-  onAutoLayout?: () => void; // Made optional
+  onAutoLayout?: () => void;
+  onAiTidySelection?: () => void; // New prop
 }
 
 export const EditorToolbar = React.memo(function EditorToolbar({
@@ -71,7 +73,8 @@ export const EditorToolbar = React.memo(function EditorToolbar({
   canRedo,
   selectedNodeId,
   numMultiSelectedNodes,
-  onAutoLayout, // Destructure new prop
+  onAutoLayout,
+  onAiTidySelection, // Destructure new prop
 }: EditorToolbarProps) {
   const { toast } = useToast();
 
@@ -241,6 +244,27 @@ export const EditorToolbar = React.memo(function EditorToolbar({
           </TooltipTrigger>
           <TooltipContent>{getSummarizeNodesTooltip()}</TooltipContent>
         </Tooltip>
+        <Tooltip>
+          <TooltipTrigger asChild>
+            <Button
+              variant="ghost"
+              size="icon"
+              onClick={() => handleGenAIClick(onAiTidySelection!, "AI Tidy Selection")}
+              disabled={isViewOnlyMode || numMultiSelectedNodes < 2 || !onAiTidySelection}
+            >
+              <AlignHorizontalDistributeCenter className="h-5 w-5" />
+            </Button>
+          </TooltipTrigger>
+          <TooltipContent>
+            {isViewOnlyMode
+              ? "AI Tidy (Disabled in View Mode)"
+              : numMultiSelectedNodes < 2
+              ? "AI Tidy (Select 2+ nodes)"
+              : !onAiTidySelection
+              ? "AI Tidy (Not available)"
+              : "AI Tidy Selection"}
+          </TooltipContent>
+        </Tooltip>
 
 
         {/* Spacer */}
-- 
2.48.1.windows.1

