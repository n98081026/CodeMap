From 4e5e2f7fe8d5a707b97b612ee4ea3ae5839bd832 Mon Sep 17 00:00:00 2001
From: "google-labs-jules[bot]"
 <161369871+google-labs-jules[bot]@users.noreply.github.com>
Date: Sun, 15 Jun 2025 00:26:02 +0000
Subject: [PATCH 19/27] Feat: Implement AI Tidy-Up with optional semantic
 grouping

This commit completes the "AI Tidy-Up / Smart Alignment (Contextual)" feature. When multiple nodes are selected, you can now trigger an AI action to automatically align and distribute these nodes. Additionally, the AI can now optionally suggest and create a new parent node to semantically group the selection.

Key changes:
- **`ai-tidy-up-selection.ts` (AI Flow):**
    - The output schema `AiTidyUpSelectionOutputSchema` now includes an optional `suggestedParentNode: { text: string; type: string; }`.
    - The prompt for `aiTidyUpSelectionPrompt` was enhanced to instruct me to suggest a parent node (label and type 'ai-group') if the selected nodes form a strong thematic cluster, alongside providing tidied positions.
- **`useConceptMapAITools.ts` (Hook Logic):**
    - The `handleAiTidyUpSelection` function was updated to:
        - Process the `newPositions` from the AI flow and apply them using the store's `applyLayout` action.
        - If `suggestedParentNode` is present in the AI output:
            - Calculate a central position for this new parent node based on its children's tidied positions.
            - Create the parent node using `addStoreNode`.
            - Update the `parentNode` property of each of the originally selected (and now tidied) nodes to link them to the new parent, using `updateStoreNode`.
        - Update toast notifications to inform you if nodes were also grouped.
- **`TODO.md`**: Updated to mark the "AI Tidy-Up" feature, including its semantic grouping enhancement, as complete.

This feature helps you quickly organize selections of nodes and can now also assist in structuring the map by suggesting logical groupings.
---
 TODO.md                              |  2 +-
 src/ai/flows/ai-tidy-up-selection.ts | 36 ++++++++++++++---
 src/hooks/useConceptMapAITools.ts    | 59 +++++++++++++++++++++++++++-
 3 files changed, 89 insertions(+), 8 deletions(-)

diff --git a/TODO.md b/TODO.md
index 4caf7c2..114e380 100644
--- a/TODO.md
+++ b/TODO.md
@@ -182,7 +182,7 @@
 ### AI-Powered Layout and Structuring Assistance
 - [x] "AI Tidy-Up" / Smart Alignment (Contextual):
     - [x] On selection of multiple nodes, offer an "AI Tidy selection" option (Implemented in EditorToolbar, AI aligns/distributes).
-    - [ ] (Enhancement) AI attempts to also semantically group selected nodes (e.g., create temporary parent node).
+    - [x] (Enhancement) AI attempts to also semantically group selected nodes (e.g., create temporary parent node). (AI flow can now suggest a parent, and hook logic implements its creation and re-parenting of children).
 - [ ] Dynamic "Structure Suggestion" Overlays (Evolution of existing TODO item):
     - [ ] AI periodically/on-demand scans map for structural improvement opportunities.
     - [ ] Visuals: Draw temporary dashed line between nodes with "?" and suggested relation. Highlight node groups with pulsating overlay and tooltip "Group these concepts?".
diff --git a/src/ai/flows/ai-tidy-up-selection.ts b/src/ai/flows/ai-tidy-up-selection.ts
index 9e47ac0..56796e1 100644
--- a/src/ai/flows/ai-tidy-up-selection.ts
+++ b/src/ai/flows/ai-tidy-up-selection.ts
@@ -29,7 +29,11 @@ const NodeNewPositionSchema = z.object({
 });
 
 export const AiTidyUpSelectionOutputSchema = z.object({
-  newPositions: z.array(NodeNewPositionSchema).describe("Array of nodes with their new suggested positions.")
+  newPositions: z.array(NodeNewPositionSchema).describe("Array of nodes with their new suggested positions."),
+  suggestedParentNode: z.object({
+    text: z.string().describe("A concise and descriptive label for the new parent node."),
+    type: z.string().default('ai-group').describe("The type for the new parent node (e.g., 'ai-group').")
+  }).optional().describe("If the AI deems it appropriate, suggests a new parent node to group all selected nodes.")
 });
 export type AiTidyUpSelectionOutput = z.infer<typeof AiTidyUpSelectionOutputSchema>;
 
@@ -62,13 +66,35 @@ Nodes to rearrange:
   {{#if type}}Type: "{{type}}"{{/if}}
 {{/each}}
 
-Return an array of objects, where each object contains the "id" of a node and its new "x" and "y" coordinates.
-Example output format:
+Additionally, analyze the provided nodes (text and type if available) for thematic coherence.
+If all the selected nodes together represent a strong, single overarching theme or concept that would benefit from being visually grouped under a new parent node:
+- You may optionally suggest creating such a parent node by providing a 'suggestedParentNode' object in your output, alongside the 'newPositions' array.
+- This 'suggestedParentNode' object should contain:
+    - 'text': A concise and descriptive label for this new parent node that summarizes the group.
+    - 'type': A type for this new parent node, for example, 'ai-group'.
+- If you suggest a parent node, all the input nodes will be assigned as its children by the application. You should still provide their new tidied positions; these positions will be relative to the canvas.
+
+If you do not think a single overarching parent node is appropriate for the entire selection, omit the 'suggestedParentNode' field from your output.
+Your primary goal is still to return the 'newPositions' for all input nodes. The parent suggestion is secondary.
+
+The output must be a JSON object. It must contain a key "newPositions" which is an array of objects, each with "id", "x", and "y".
+Optionally, it can also contain a key "suggestedParentNode" which is an object with "text" and "type".
+Example output format WITH a suggested parent:
+{
+  "newPositions": [
+    { "id": "node1_id", "x": 150, "y": 100 },
+    { "id": "node2_id", "x": 150, "y": 200 }
+  ],
+  "suggestedParentNode": {
+    "text": "Overall Theme for Group",
+    "type": "ai-group"
+  }
+}
+Example output format WITHOUT a suggested parent:
 {
   "newPositions": [
     { "id": "node1_id", "x": 150, "y": 100 },
-    { "id": "node2_id", "x": 150, "y": 200 },
-    { "id": "node3_id", "x": 300, "y": 150 }
+    { "id": "node2_id", "x": 150, "y": 200 }
   ]
 }
 `,
diff --git a/src/hooks/useConceptMapAITools.ts b/src/hooks/useConceptMapAITools.ts
index 42fe2c6..5f6d25a 100644
--- a/src/hooks/useConceptMapAITools.ts
+++ b/src/hooks/useConceptMapAITools.ts
@@ -768,8 +768,63 @@ export function useConceptMapAITools(isViewOnlyMode: boolean) {
       const output: AiTidyUpSelectionOutput = await aiTidyUpSelectionFlow(input);
 
       if (output.newPositions && output.newPositions.length > 0) {
-        storeApplyLayout(output.newPositions);
-        toast({ title: "AI Tidy-Up Successful", description: "Selected nodes have been rearranged." });
+        storeApplyLayout(output.newPositions); // Existing line
+
+        // NEW LOGIC FOR GROUPING STARTS HERE
+        if (output.suggestedParentNode && output.suggestedParentNode.text) {
+          const { text: parentText, type: parentType } = output.suggestedParentNode;
+
+          // Calculate center position for the new parent node based on the new positions of children
+          let sumX = 0;
+          let sumY = 0;
+
+          const childrenNewPositions = output.newPositions.filter(p =>
+            selectedNodesData.some(sn => sn.id === p.id) // Ensure we only consider original selection
+          );
+
+          if (childrenNewPositions.length > 0) {
+            let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
+            childrenNewPositions.forEach(p => {
+              // Find original node to get its dimensions, as newPositions only has x,y
+              const originalNode = selectedNodesData.find(sn => sn.id === p.id);
+              const nodeWidth = originalNode?.width || 150; // Default if not found
+              const nodeHeight = originalNode?.height || 70; // Default if not found
+
+              sumX += p.x + nodeWidth / 2;
+              sumY += p.y + nodeHeight / 2;
+              minX = Math.min(minX, p.x);
+              minY = Math.min(minY, p.y);
+              maxX = Math.max(maxX, p.x + nodeWidth);
+              maxY = Math.max(maxY, p.y + nodeHeight);
+            });
+            const avgCenterX = sumX / childrenNewPositions.length;
+            const avgCenterY = sumY / childrenNewPositions.length;
+
+            const parentNodePosition = {
+              x: Math.round((avgCenterX - (150 / 2)) / GRID_SIZE_FOR_AI_PLACEMENT) * GRID_SIZE_FOR_AI_PLACEMENT, // Assuming default parent width 150
+              y: Math.round((avgCenterY - (70 / 2)) / GRID_SIZE_FOR_AI_PLACEMENT) * GRID_SIZE_FOR_AI_PLACEMENT   // Assuming default parent height 70
+            };
+
+            // Add the new parent node
+            const newParentNodeId = useConceptMapStore.getState().addNode({
+              text: parentText,
+              type: parentType || 'ai-group',
+              position: parentNodePosition,
+            });
+
+            // Update original selected nodes to be children of this new parent
+            childrenNewPositions.forEach(childPos => {
+              useConceptMapStore.getState().updateNode(childPos.id, { parentNode: newParentNodeId });
+            });
+
+            toast({ title: "AI Tidy-Up & Grouping Successful", description: `Selected nodes rearranged and grouped under "${parentText}".` });
+          } else {
+             toast({ title: "AI Tidy-Up Successful", description: "Selected nodes have been rearranged. Grouping was suggested but could not be applied." });
+          }
+        } else {
+          // No parent node suggested, only positions were applied
+          toast({ title: "AI Tidy-Up Successful", description: "Selected nodes have been rearranged." });
+        }
       } else {
         toast({ title: "AI Tidy-Up", description: "AI did not suggest new positions or output was invalid.", variant: "default" });
       }
-- 
2.48.1.windows.1

