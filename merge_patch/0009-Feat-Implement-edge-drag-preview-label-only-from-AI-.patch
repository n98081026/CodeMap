From 2591f9569029cb625b95b668e2fb88a540e2baa0 Mon Sep 17 00:00:00 2001
From: "google-labs-jules[bot]"
 <161369871+google-labs-jules[bot]@users.noreply.github.com>
Date: Sat, 14 Jun 2025 12:24:07 +0000
Subject: [PATCH 09/27] Feat: Implement edge drag preview (label only) from AI
 Panel

This commit introduces a visual preview for "Suggested Relations" when dragged from the AISuggestionPanel onto the concept map canvas. The relation's label will now follow the cursor during the drag operation.

Key changes:
- `concept-map-store.ts`:
    - Added `draggedRelationLabel` state to store the label of the relation being dragged.
    - Implemented `setDraggedRelationPreview` action and updated `clearDragPreview` to manage this state.
- `ai-suggestion-panel.tsx`:
    - When dragging a relation, it now sets the `draggedRelationLabel` in the store.
- `drag-preview-label-node.tsx`:
    - New component to render the text-based label preview on the canvas.
- `interactive-canvas.tsx`:
    - Registered `dragPreviewLabel` as a new custom node type.
- `flow-canvas-core.tsx`:
    - Observes `draggedRelationLabel` and `dragPreviewPosition` from the store.
    - Dynamically renders the `dragPreviewLabel` node at the cursor's (grid-snapped) position during a drag.
- `TODO.md`:
    - Updated to mark previously completed toolbar positioning task and this edge drag preview feature as complete.

This enhancement provides you with better visual feedback when attempting to create edges from AI-suggested relations.
---
 TODO.md                                       |  6 ++--
 .../concept-map/ai-suggestion-panel.tsx       | 30 +++++++++++++---
 .../concept-map/drag-preview-label-node.tsx   | 36 +++++++++++++++++++
 .../concept-map/flow-canvas-core.tsx          | 20 ++++++++---
 .../concept-map/interactive-canvas.tsx        |  6 ++--
 src/stores/concept-map-store.ts               | 32 ++++++++++++-----
 6 files changed, 109 insertions(+), 21 deletions(-)
 create mode 100644 src/components/concept-map/drag-preview-label-node.tsx

diff --git a/TODO.md b/TODO.md
index 6a7b9f3..4414d92 100644
--- a/TODO.md
+++ b/TODO.md
@@ -157,14 +157,14 @@
 - [x] "AI Contextual Mini-Toolbar" on Node Hover/Selection:
     - [x] Display a small, floating toolbar near selected/hovered node with 2-3 most relevant AI actions (e.g., Expand, Summarize, Rewrite).
     - [x] Interaction: Icons for quick actions. Clicking an icon performs a default action or opens a streamlined input. (Core AI connections made, further refinement of actions can continue)
-- [ ] **SelectedNodeToolbar Enhancements:**
+- [x] **SelectedNodeToolbar Enhancements:**
     - [x] Implement "Change Color" functionality (e.g., via a popover color picker).
     - [x] Implement "Start Connection via button" (alternative to dragging handles).
-    - [ ] Investigate/Implement dynamic, viewport-aware positioning for the toolbar.
+    - [x] Investigate/Implement dynamic, viewport-aware positioning for the toolbar.
 - [x] Drag-and-Drop from AI Panel with Preview:
     - [x] Allow dragging concepts/relations from AISuggestionPanel directly onto the canvas.
     - [x] Interaction: Show a preview of the **node** under the cursor during drag (snapped to grid). (Implemented for nodes dragged from AI Panel).
-    - [ ] Interaction (Enhancement): Show a preview for dragging **edges** from AI Panel (if applicable, or for edges dragged from other UI elements).
+    - [x] Interaction (Enhancement): Show a preview for dragging **edges** from AI Panel (label follows cursor). (Implemented for relations from AI Panel).
     - [x] Interaction (Enhancement): Ensure node-to-node snapping guides actively interact with the node drag preview (current preview snaps to grid).
 
 ### Iterative and Preview-Oriented AI Generation
diff --git a/src/components/concept-map/ai-suggestion-panel.tsx b/src/components/concept-map/ai-suggestion-panel.tsx
index b7c5f77..3bae0b2 100644
--- a/src/components/concept-map/ai-suggestion-panel.tsx
+++ b/src/components/concept-map/ai-suggestion-panel.tsx
@@ -53,8 +53,12 @@ export const AISuggestionPanel = React.memo(function AISuggestionPanel({
   onClearSuggestedRelations,
   isViewOnlyMode
 }: AISuggestionPanelProps) {
-  const { setDragPreview, clearDragPreview } = useConceptMapStore( // Get store actions
-    useCallback(s => ({ setDragPreview: s.setDragPreview, clearDragPreview: s.clearDragPreview }), [])
+  const { setDragPreview, clearDragPreview, setDraggedRelationPreview } = useConceptMapStore(
+    useCallback(s => ({
+      setDragPreview: s.setDragPreview,
+      clearDragPreview: s.clearDragPreview,
+      setDraggedRelationPreview: s.setDraggedRelationPreview // Added
+    }), [])
   );
 
   const [editableExtracted, setEditableExtracted] = useState<EditableSuggestion[]>([]);
@@ -426,8 +430,26 @@ export const AISuggestionPanel = React.memo(function AISuggestionPanel({
     };
 
     return (
-      <div className="flex items-center text-sm group w-full">
-        <GitFork className="h-4 w-4 mr-2 text-purple-500 flex-shrink-0"/>
+      <div
+        className="flex items-center text-sm group w-full"
+        draggable={!isViewOnlyMode && !item.isEditing}
+        onDragStart={(e) => {
+          if (isViewOnlyMode || item.isEditing) return;
+          e.dataTransfer.setData('application/json', JSON.stringify({
+            type: 'relation-suggestion',
+            sourceText: item.current.source,
+            targetText: item.current.target,
+            label: item.current.relation,
+          }));
+          e.dataTransfer.effectAllowed = 'copy';
+          setDraggedRelationPreview(item.current.relation);
+        }}
+        onDragEnd={() => {
+          if (!isViewOnlyMode) clearDragPreview();
+        }}
+        title={!isViewOnlyMode && !item.isEditing ? "Drag this relation to the canvas (experimental)" : ""}
+      >
+        <GitFork className={cn("h-4 w-4 mr-2 text-purple-500 flex-shrink-0", !isViewOnlyMode && !item.isEditing && "cursor-grab")} />
         {renderField('source', relationNodeExistence?.source)}
         <span className="mx-1">â†’</span>
         {renderField('target', relationNodeExistence?.target)}
diff --git a/src/components/concept-map/drag-preview-label-node.tsx b/src/components/concept-map/drag-preview-label-node.tsx
new file mode 100644
index 0000000..28ac68a
--- /dev/null
+++ b/src/components/concept-map/drag-preview-label-node.tsx
@@ -0,0 +1,36 @@
+"use client";
+
+import React from 'react';
+import { memo } from 'react';
+
+interface DragPreviewLabelNodeData {
+  label: string;
+}
+
+interface DragPreviewLabelNodeProps {
+  data: DragPreviewLabelNodeData;
+  // React Flow may pass other props like xPos, yPos, selected, etc.
+}
+
+const DragPreviewLabelNode: React.FC<DragPreviewLabelNodeProps> = ({ data }) => {
+  return (
+    <div
+      style={{
+        fontSize: '10px',
+        padding: '2px 5px',
+        backgroundColor: 'rgba(255, 255, 255, 0.9)',
+        borderRadius: '3px',
+        border: '1px solid #ccc',
+        opacity: 0.85,
+        pointerEvents: 'none', // Important: Prevent this node from capturing mouse events
+        color: '#333', // Ensure text is readable
+        // width and height will be auto based on content, or could be set if needed
+      }}
+      className="shadow-sm" // Optional: for a slight shadow
+    >
+      {data.label}
+    </div>
+  );
+};
+
+export default memo(DragPreviewLabelNode);
diff --git a/src/components/concept-map/flow-canvas-core.tsx b/src/components/concept-map/flow-canvas-core.tsx
index c883e84..8edce7b 100644
--- a/src/components/concept-map/flow-canvas-core.tsx
+++ b/src/components/concept-map/flow-canvas-core.tsx
@@ -183,9 +183,10 @@ const FlowCanvasCoreInternal: React.FC<FlowCanvasCoreProps> = ({
     connectingState,
     completeConnectionMode,
     cancelConnectionMode,
-    dragPreviewItem,          // Added
-    dragPreviewPosition,      // Added
-    updateDragPreviewPosition // Added
+    dragPreviewItem,
+    dragPreviewPosition,
+    updateDragPreviewPosition,
+    draggedRelationLabel    // Added
   } = useConceptMapStore();
   const { stagedMapData, isStagingActive, conceptExpansionPreview } = useConceptMapStore(
     useCallback(s => ({
@@ -626,9 +627,20 @@ const FlowCanvasCoreInternal: React.FC<FlowCanvasCoreProps> = ({
         height: 70,
       };
       nodes.push(previewNodeForDrag);
+    } else if (draggedRelationLabel && dragPreviewPosition) { // Check for draggedRelationLabel
+      const previewLabelNode: RFNode = {
+        id: 'drag-preview-relation-label',
+        type: 'dragPreviewLabel', // Ensure this type is registered in InteractiveCanvas
+        position: dragPreviewPosition,
+        data: { label: draggedRelationLabel },
+        draggable: false,
+        selectable: false,
+        // width/height will be auto from the component's style
+      };
+      nodes.push(previewLabelNode);
     }
     return nodes;
-  }, [rfNodes, rfStagedNodes, rfPreviewNodes, dragPreviewItem, dragPreviewPosition]);
+  }, [rfNodes, rfStagedNodes, rfPreviewNodes, dragPreviewItem, dragPreviewPosition, draggedRelationLabel]);
 
   const combinedEdges = useMemo(() => [...rfEdges, ...rfStagedEdges, ...rfPreviewEdges], [rfEdges, rfStagedEdges, rfPreviewEdges]);
 
diff --git a/src/components/concept-map/interactive-canvas.tsx b/src/components/concept-map/interactive-canvas.tsx
index 81c3493..8d55256 100644
--- a/src/components/concept-map/interactive-canvas.tsx
+++ b/src/components/concept-map/interactive-canvas.tsx
@@ -28,13 +28,15 @@ import { Card } from '@/components/ui/card';
 import useConceptMapStore from '@/stores/concept-map-store'; // Added import
 import CustomNodeComponent, { type CustomNodeData } from './custom-node';
 import OrthogonalEdge, { type OrthogonalEdgeData } from './orthogonal-edge';
-import DragPreviewNode from './drag-preview-node'; // Import DragPreviewNode
+import DragPreviewNode from './drag-preview-node';
+import DragPreviewLabelNode from './drag-preview-label-node'; // Import DragPreviewLabelNode
 import { cn } from '@/lib/utils';
 
 // Define nodeTypesConfig and edgeTypesConfig as top-level constants here
 const nodeTypesConfig: NodeTypes = {
   customConceptNode: CustomNodeComponent,
-  dragPreviewNode: DragPreviewNode, // New entry
+  dragPreviewNode: DragPreviewNode,
+  dragPreviewLabel: DragPreviewLabelNode, // New entry for label preview
 };
 
 const edgeTypesConfig: EdgeTypes = {
diff --git a/src/stores/concept-map-store.ts b/src/stores/concept-map-store.ts
index 20921ed..2df11e8 100644
--- a/src/stores/concept-map-store.ts
+++ b/src/stores/concept-map-store.ts
@@ -68,6 +68,7 @@ connectingState: { sourceNodeId: string; sourceHandleId?: string | null; } | nul
 // Drag preview state
 dragPreviewItem: { text: string; type: string; } | null;
 dragPreviewPosition: { x: number; y: number; } | null;
+draggedRelationLabel: string | null; // New state for edge label preview
 
   setMapId: (id: string | null) => void;
   setMapName: (name: string) => void;
@@ -133,9 +134,10 @@ cancelConnectionMode: () => void;
 setDragPreview: (item: { text: string; type: string } | null, position?: { x: number; y: number } | null) => void;
 updateDragPreviewPosition: (position: { x: number; y: number }) => void;
 clearDragPreview: () => void;
+setDraggedRelationPreview: (label: string | null) => void; // New action
 }
 
-type TrackedState = Pick<ConceptMapState, 'mapData' | 'mapName' | 'isPublic' | 'sharedWithClassroomId' | 'selectedElementId' | 'selectedElementType' | 'multiSelectedNodeIds' | 'editingNodeId' | 'stagedMapData' | 'isStagingActive' | 'conceptExpansionPreview' /* connectingState, dragPreviewItem, dragPreviewPosition are not tracked */>;
+type TrackedState = Pick<ConceptMapState, 'mapData' | 'mapName' | 'isPublic' | 'sharedWithClassroomId' | 'selectedElementId' | 'selectedElementType' | 'multiSelectedNodeIds' | 'editingNodeId' | 'stagedMapData' | 'isStagingActive' | 'conceptExpansionPreview' /* connectingState, dragPreviewItem, dragPreviewPosition, draggedRelationLabel are not tracked */>;
 
 export type ConceptMapStoreTemporalState = ZundoTemporalState<TrackedState>;
 
@@ -150,10 +152,11 @@ const initialStateBase: Omit<ConceptMapState,
   'initializeNewMap' | 'setLoadedMap' | 'importMapData' | 'resetStore' |
   'addNode' | 'updateNode' | 'deleteNode' | 'addEdge' | 'updateEdge' | 'deleteEdge' |
   'setStagedMapData' | 'clearStagedMapData' | 'commitStagedMapData' | 'deleteFromStagedMapData' |
-  'setConceptExpansionPreview' | 'updatePreviewNode' | // Added updatePreviewNode to Omit
+  'setConceptExpansionPreview' | 'updatePreviewNode' |
   'applyLayout' |
   'startConnectionMode' | 'completeConnectionMode' | 'cancelConnectionMode' |
-  'setDragPreview' | 'updateDragPreviewPosition' | 'clearDragPreview'
+  'setDragPreview' | 'updateDragPreviewPosition' | 'clearDragPreview' |
+  'setDraggedRelationPreview' // Added to Omit
 > = {
   mapId: null,
   mapName: 'Untitled Concept Map',
@@ -180,8 +183,9 @@ const initialStateBase: Omit<ConceptMapState,
   isStagingActive: false,
   conceptExpansionPreview: null,
   connectingState: null,
-  dragPreviewItem: null, // Initial value for new state
-  dragPreviewPosition: null, // Initial value for new state
+  dragPreviewItem: null,
+  dragPreviewPosition: null,
+  draggedRelationLabel: null, // Initial value for new state
 };
 
 // Define ConceptExpansionPreviewNode and ConceptExpansionPreviewState types
@@ -673,10 +677,22 @@ export const useConceptMapStore = create<ConceptMapState>()(
         }
       },
       clearDragPreview: () => {
-        if (get().dragPreviewItem) { // Only log if it was active
-           get().addDebugLog(`[STORE clearDragPreview]`);
+        if (get().dragPreviewItem || get().draggedRelationLabel) { // Log if any drag preview was active
+           get().addDebugLog(`[STORE clearDragPreview] All drag previews cleared.`);
+        }
+        set({
+          dragPreviewItem: null,
+          dragPreviewPosition: null,
+          draggedRelationLabel: null, // Also clear relation label
+        });
+      },
+      setDraggedRelationPreview: (label) => {
+        get().addDebugLog(`[STORE setDraggedRelationPreview] Label: ${label}`);
+        if (label && get().dragPreviewItem) { // If a node drag preview was active, clear it
+          set({ draggedRelationLabel: label, dragPreviewItem: null, dragPreviewPosition: null });
+        } else {
+          set({ draggedRelationLabel: label });
         }
-        set({ dragPreviewItem: null, dragPreviewPosition: null });
       },
     }),
     {
-- 
2.48.1.windows.1

