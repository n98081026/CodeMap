From 9761ac8b6ff6411a6c794bd797a2d940361327b7 Mon Sep 17 00:00:00 2001
From: "google-labs-jules[bot]"
 <161369871+google-labs-jules[bot]@users.noreply.github.com>
Date: Sat, 14 Jun 2025 10:58:05 +0000
Subject: [PATCH 06/27] Feat: Implement drag preview for concepts from AI Panel

This commit introduces a visual preview when dragging concepts (potential nodes) from the AISuggestionPanel onto the concept map canvas.

Key changes:
- `concept-map-store.ts`:
    - Added new state (`dragPreviewItem`, `dragPreviewPosition`) and actions (`setDragPreview`, `updateDragPreviewPosition`, `clearDragPreview`) to manage the drag preview's data and visibility.
- `ai-suggestion-panel.tsx`:
    - Draggable concept items now trigger `setDragPreview` on dragStart and `clearDragPreview` on dragEnd.
- `drag-preview-node.tsx`:
    - New component created to render the visual appearance of the node being dragged (e.g., a semi-transparent box with the concept text).
- `interactive-canvas.tsx`:
    - Registered 'dragPreviewNode' as a new custom node type.
- `flow-canvas-core.tsx`:
    - Observes the drag preview state from the store.
    - Dynamically adds the `dragPreviewNode` to the canvas when a drag from the AI panel is active.
    - The `onDragOver` handler now updates the preview node's position (snapped to grid) to follow the cursor in real-time over the canvas.
- `TODO.md`:
    - Updated to reflect completion of node drag preview and outline further enhancements (edge preview, advanced preview snapping).

This feature enhances your experience by providing immediate visual feedback about the item being dragged and its potential placement on the map.
---
 TODO.md                                       |  4 +-
 .../concept-map/ai-suggestion-panel.tsx       | 23 +++++++----
 .../concept-map/drag-preview-node.tsx         | 32 +++++++++++++++
 .../concept-map/flow-canvas-core.tsx          | 40 ++++++++++++++++---
 .../concept-map/interactive-canvas.tsx        |  2 +
 src/stores/concept-map-store.ts               | 39 +++++++++++++++---
 6 files changed, 121 insertions(+), 19 deletions(-)
 create mode 100644 src/components/concept-map/drag-preview-node.tsx

diff --git a/TODO.md b/TODO.md
index cc66125..30df096 100644
--- a/TODO.md
+++ b/TODO.md
@@ -163,7 +163,9 @@
     - [ ] Investigate/Implement dynamic, viewport-aware positioning for the toolbar.
 - [x] Drag-and-Drop from AI Panel with Preview:
     - [x] Allow dragging concepts/relations from AISuggestionPanel directly onto the canvas.
-    - [ ] Interaction: Show a preview of the node/edge under the cursor during drag. Activate snapping guides. Release creates the element. (Dragging concepts done, preview on drag is a UX enhancement for later)
+    - [x] Interaction: Show a preview of the **node** under the cursor during drag (snapped to grid). (Implemented for nodes dragged from AI Panel).
+    - [ ] Interaction (Enhancement): Show a preview for dragging **edges** from AI Panel (if applicable, or for edges dragged from other UI elements).
+    - [ ] Interaction (Enhancement): Ensure node-to-node snapping guides actively interact with the node drag preview (current preview snaps to grid).
 
 ### Iterative and Preview-Oriented AI Generation
 - [x] "AI Staging Area" for Cluster/Snippet Generation:
diff --git a/src/components/concept-map/ai-suggestion-panel.tsx b/src/components/concept-map/ai-suggestion-panel.tsx
index ca8ac8e..52f2b1f 100644
--- a/src/components/concept-map/ai-suggestion-panel.tsx
+++ b/src/components/concept-map/ai-suggestion-panel.tsx
@@ -11,7 +11,8 @@ import { GitFork, Brain, SearchCode, Lightbulb, PlusCircle, Layers, Link2, Box,
 import { ScrollArea } from "@/components/ui/scroll-area";
 import type { ConceptMapData, ConceptMapNode } from "@/types";
 import { cn } from '@/lib/utils';
-import { EmptyState } from '@/components/layout/empty-state'; 
+import { EmptyState } from '@/components/layout/empty-state';
+import useConceptMapStore from '@/stores/concept-map-store'; // Added store import
 
 interface AISuggestionPanelProps {
   mapData?: ConceptMapData; 
@@ -52,6 +53,9 @@ export const AISuggestionPanel = React.memo(function AISuggestionPanel({
   onClearSuggestedRelations,
   isViewOnlyMode
 }: AISuggestionPanelProps) {
+  const { setDragPreview, clearDragPreview } = useConceptMapStore( // Get store actions
+    useCallback(s => ({ setDragPreview: s.setDragPreview, clearDragPreview: s.clearDragPreview }), [])
+  );
 
   const [editableExtracted, setEditableExtracted] = useState<EditableSuggestion[]>([]);
   const [editableRelations, setEditableRelations] = useState<EditableRelationSuggestion[]>([]);
@@ -330,14 +334,18 @@ export const AISuggestionPanel = React.memo(function AISuggestionPanel({
     const isExactMatch = itemStatus === 'exact-match';
     const isSimilarMatch = itemStatus === 'similar-match';
 
-    const handleDragStart = (event: React.DragEvent<HTMLDivElement>, conceptText: string) => {
+    const handleDragStart = (event: React.DragEvent<HTMLDivElement>, conceptText: string, conceptType?: string) => {
       event.dataTransfer.setData('application/json', JSON.stringify({
-        type: 'concept-suggestion', // To identify the type of dragged item on drop
+        type: 'concept-suggestion',
         text: conceptText,
       }));
       event.dataTransfer.effectAllowed = 'copy';
-      // Optionally, use store's addDebugLog if available globally or via context/prop
-      console.log('[AISuggestionPanel] Dragging concept:', conceptText);
+      setDragPreview({ text: conceptText, type: conceptType || 'ai-concept' }); // Set drag preview
+      console.log('[AISuggestionPanel] Dragging concept:', conceptText, 'Type:', conceptType || 'ai-concept');
+    };
+
+    const handleDragEnd = () => {
+      clearDragPreview(); // Clear drag preview
     };
 
     if (item.isEditing && !isViewOnlyMode) {
@@ -361,8 +369,9 @@ export const AISuggestionPanel = React.memo(function AISuggestionPanel({
     return (
       <div
         className="flex items-center justify-between w-full group"
-        draggable={!isViewOnlyMode && !item.isEditing && !isExactMatch} // Only allow dragging for non-editing, non-exact match, non-viewOnly items
-        onDragStart={(e) => !isViewOnlyMode && !item.isEditing && !isExactMatch && handleDragStart(e, item.current)}
+        draggable={!isViewOnlyMode && !item.isEditing && !isExactMatch}
+        onDragStart={(e) => !isViewOnlyMode && !item.isEditing && !isExactMatch && handleDragStart(e, item.current, 'ai-concept')} // Pass a default type
+        onDragEnd={handleDragEnd} // Add onDragEnd
         title={!isViewOnlyMode && !item.isEditing && !isExactMatch ? "Drag this concept to the canvas" : ""}
       >
         <Label
diff --git a/src/components/concept-map/drag-preview-node.tsx b/src/components/concept-map/drag-preview-node.tsx
new file mode 100644
index 0000000..4621bea
--- /dev/null
+++ b/src/components/concept-map/drag-preview-node.tsx
@@ -0,0 +1,32 @@
+"use client";
+
+import React from 'react';
+import { cn } from '@/lib/utils'; // Assuming you have a utility for class names
+
+interface DragPreviewNodeProps {
+  data: {
+    text: string;
+    type: string; // type might be used for different styling in future, or just for consistency
+  };
+  // React Flow injects other props like id, xPos, yPos, selected, etc., but we might not need them all.
+}
+
+const DragPreviewNode: React.FC<DragPreviewNodeProps> = ({ data }) => {
+  return (
+    <div
+      className={cn(
+        "w-[150px] h-[70px] p-2 border border-dashed border-primary bg-primary/10 rounded shadow-md opacity-75",
+        "flex items-center justify-center text-center text-sm text-primary-foreground" // Adjusted text color for better visibility on primary/10
+      )}
+      style={{
+        // Ensure foreground text is visible. Primary/10 might be light.
+        // Consider a slightly darker text color if primary-foreground is also light.
+        // Example: color: 'hsl(var(--primary))' if primary/10 is very light.
+      }}
+    >
+      <span className="truncate">{data.text || "Dragged Item"}</span>
+    </div>
+  );
+};
+
+export default React.memo(DragPreviewNode); // Memoize for performance, as its data might update frequently during drag
diff --git a/src/components/concept-map/flow-canvas-core.tsx b/src/components/concept-map/flow-canvas-core.tsx
index 4433dfe..6a749c9 100644
--- a/src/components/concept-map/flow-canvas-core.tsx
+++ b/src/components/concept-map/flow-canvas-core.tsx
@@ -59,15 +59,19 @@ const FlowCanvasCoreInternal: React.FC<FlowCanvasCoreProps> = ({
     addNode: addNodeToStore,
     setSelectedElement,
     setEditingNodeId,
-    connectingState,      // Added
-    completeConnectionMode, // Added
-    cancelConnectionMode,   // Added
+    connectingState,
+    completeConnectionMode,
+    cancelConnectionMode,
+    dragPreviewItem,          // Added
+    dragPreviewPosition,      // Added
+    updateDragPreviewPosition // Added
   } = useConceptMapStore();
   const { stagedMapData, isStagingActive, conceptExpansionPreview } = useConceptMapStore(
     useCallback(s => ({
       stagedMapData: s.stagedMapData,
       isStagingActive: s.isStagingActive,
-      conceptExpansionPreview: s.conceptExpansionPreview
+      conceptExpansionPreview: s.conceptExpansionPreview,
+      // dragPreviewItem and dragPreviewPosition are not needed here as they are directly accessed
     }), [])
   );
   const reactFlowInstance = useReactFlow();
@@ -553,7 +557,14 @@ const FlowCanvasCoreInternal: React.FC<FlowCanvasCoreProps> = ({
   const handleCanvasDragOver = useCallback((event: React.DragEvent) => {
     event.preventDefault();
     event.dataTransfer.dropEffect = 'copy';
-  }, []);
+    if (dragPreviewItem && reactFlowInstance) { // Check if in drag preview mode
+      const flowPosition = reactFlowInstance.screenToFlowPosition({ x: event.clientX, y: event.clientY });
+      // Snap to grid for smoother preview positioning
+      const snappedX = Math.round(flowPosition.x / GRID_SIZE) * GRID_SIZE;
+      const snappedY = Math.round(flowPosition.y / GRID_SIZE) * GRID_SIZE;
+      updateDragPreviewPosition({ x: snappedX, y: snappedY });
+    }
+  }, [dragPreviewItem, reactFlowInstance, updateDragPreviewPosition, GRID_SIZE]);
 
   const handleCanvasDrop = useCallback((droppedData: {type: string, text: string}, positionInFlow: {x: number, y: number}) => {
     if (isViewOnlyMode) return;
@@ -565,7 +576,24 @@ const FlowCanvasCoreInternal: React.FC<FlowCanvasCoreProps> = ({
   }, [isViewOnlyMode, reactFlowInstance, onConceptSuggestionDrop, GRID_SIZE]);
 
   // Combine main, staged, and preview elements for rendering
-  const combinedNodes = useMemo(() => [...rfNodes, ...rfStagedNodes, ...rfPreviewNodes], [rfNodes, rfStagedNodes, rfPreviewNodes]);
+  const combinedNodes = useMemo(() => {
+    let nodes = [...rfNodes, ...rfStagedNodes, ...rfPreviewNodes];
+    if (dragPreviewItem && dragPreviewPosition) {
+      const previewNodeForDrag: RFNode = {
+        id: 'drag-preview-node',
+        type: 'dragPreviewNode',
+        position: dragPreviewPosition,
+        data: dragPreviewItem,
+        draggable: false,
+        selectable: false,
+        width: 150,
+        height: 70,
+      };
+      nodes.push(previewNodeForDrag);
+    }
+    return nodes;
+  }, [rfNodes, rfStagedNodes, rfPreviewNodes, dragPreviewItem, dragPreviewPosition]);
+
   const combinedEdges = useMemo(() => [...rfEdges, ...rfStagedEdges, ...rfPreviewEdges], [rfEdges, rfStagedEdges, rfPreviewEdges]);
 
   return (
diff --git a/src/components/concept-map/interactive-canvas.tsx b/src/components/concept-map/interactive-canvas.tsx
index 68aa91a..81c3493 100644
--- a/src/components/concept-map/interactive-canvas.tsx
+++ b/src/components/concept-map/interactive-canvas.tsx
@@ -28,11 +28,13 @@ import { Card } from '@/components/ui/card';
 import useConceptMapStore from '@/stores/concept-map-store'; // Added import
 import CustomNodeComponent, { type CustomNodeData } from './custom-node';
 import OrthogonalEdge, { type OrthogonalEdgeData } from './orthogonal-edge';
+import DragPreviewNode from './drag-preview-node'; // Import DragPreviewNode
 import { cn } from '@/lib/utils';
 
 // Define nodeTypesConfig and edgeTypesConfig as top-level constants here
 const nodeTypesConfig: NodeTypes = {
   customConceptNode: CustomNodeComponent,
+  dragPreviewNode: DragPreviewNode, // New entry
 };
 
 const edgeTypesConfig: EdgeTypes = {
diff --git a/src/stores/concept-map-store.ts b/src/stores/concept-map-store.ts
index 3687701..6f626b3 100644
--- a/src/stores/concept-map-store.ts
+++ b/src/stores/concept-map-store.ts
@@ -63,7 +63,11 @@ interface ConceptMapState {
 // Concept expansion preview state
 conceptExpansionPreview: ConceptExpansionPreviewState | null;
 
-connectingState: { sourceNodeId: string; sourceHandleId?: string | null; } | null; // New state for connection mode
+connectingState: { sourceNodeId: string; sourceHandleId?: string | null; } | null;
+
+// Drag preview state
+dragPreviewItem: { text: string; type: string; } | null;
+dragPreviewPosition: { x: number; y: number; } | null;
 
   setMapId: (id: string | null) => void;
   setMapName: (name: string) => void;
@@ -123,9 +127,14 @@ applyLayout: (updatedNodePositions: LayoutNodeUpdate[]) => void;
 startConnectionMode: (nodeId: string, handleId?: string | null) => void;
 completeConnectionMode: (targetNodeId: string, targetHandleId?: string | null) => void;
 cancelConnectionMode: () => void;
+
+// Drag preview actions
+setDragPreview: (item: { text: string; type: string } | null, position?: { x: number; y: number } | null) => void;
+updateDragPreviewPosition: (position: { x: number; y: number }) => void;
+clearDragPreview: () => void;
 }
 
-type TrackedState = Pick<ConceptMapState, 'mapData' | 'mapName' | 'isPublic' | 'sharedWithClassroomId' | 'selectedElementId' | 'selectedElementType' | 'multiSelectedNodeIds' | 'editingNodeId' | 'stagedMapData' | 'isStagingActive' | 'conceptExpansionPreview' /* connectingState is not tracked for undo/redo */>;
+type TrackedState = Pick<ConceptMapState, 'mapData' | 'mapName' | 'isPublic' | 'sharedWithClassroomId' | 'selectedElementId' | 'selectedElementType' | 'multiSelectedNodeIds' | 'editingNodeId' | 'stagedMapData' | 'isStagingActive' | 'conceptExpansionPreview' /* connectingState, dragPreviewItem, dragPreviewPosition are not tracked */>;
 
 export type ConceptMapStoreTemporalState = ZundoTemporalState<TrackedState>;
 
@@ -141,7 +150,8 @@ const initialStateBase: Omit<ConceptMapState,
   'addNode' | 'updateNode' | 'deleteNode' | 'addEdge' | 'updateEdge' | 'deleteEdge' |
   'setStagedMapData' | 'clearStagedMapData' | 'commitStagedMapData' | 'deleteFromStagedMapData' |
   'setConceptExpansionPreview' | 'applyLayout' |
-  'startConnectionMode' | 'completeConnectionMode' | 'cancelConnectionMode' // Added connection mode actions
+  'startConnectionMode' | 'completeConnectionMode' | 'cancelConnectionMode' |
+  'setDragPreview' | 'updateDragPreviewPosition' | 'clearDragPreview' // Added drag preview actions
 > = {
   mapId: null,
   mapName: 'Untitled Concept Map',
@@ -166,8 +176,10 @@ const initialStateBase: Omit<ConceptMapState,
   debugLogs: [],
   stagedMapData: null,
   isStagingActive: false,
-  conceptExpansionPreview: null, // Added concept expansion preview state
-  connectingState: null, // Initial value for new state
+  conceptExpansionPreview: null,
+  connectingState: null,
+  dragPreviewItem: null, // Initial value for new state
+  dragPreviewPosition: null, // Initial value for new state
 };
 
 // Define ConceptExpansionPreviewNode and ConceptExpansionPreviewState types
@@ -619,6 +631,23 @@ export const useConceptMapStore = create<ConceptMapState>()(
         }
         set({ connectingState: null });
       },
+
+      // Drag Preview Actions
+      setDragPreview: (item, position = null) => {
+        get().addDebugLog(`[STORE setDragPreview] Item: ${item ? item.text : 'null'}, Pos: ${JSON.stringify(position)}`);
+        set({ dragPreviewItem: item, dragPreviewPosition: item ? position : null });
+      },
+      updateDragPreviewPosition: (position) => {
+        if (get().dragPreviewItem) { // Only update if there's an active item
+          set({ dragPreviewPosition: position });
+        }
+      },
+      clearDragPreview: () => {
+        if (get().dragPreviewItem) { // Only log if it was active
+           get().addDebugLog(`[STORE clearDragPreview]`);
+        }
+        set({ dragPreviewItem: null, dragPreviewPosition: null });
+      },
     }),
     {
       partialize: (state): TrackedState => {
-- 
2.48.1.windows.1

