name: CodeMap CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test: # Unit and Integration Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type checking
      run: npm run typecheck
      
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests
      run: npm run test -- --exclude src/tests/integration --exclude src/tests-e2e # Explicitly exclude integration and e2e
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        # GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }} # If needed by unit tests
        
    - name: Run integration tests
      run: npm run test -- src/tests/integration # Target only integration tests
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        # GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }} # If needed by integration tests

    # Coverage is typically generated from unit/integration tests together
    - name: Generate test coverage (Unit & Integration)
      run: npm run test -- --coverage --exclude src/tests-e2e
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info # Ensure this path is correct
        flags: unittests,integrationtests # Combine flags if desired
        name: codecov-umbrella

  build-app: # Renamed for clarity, this is the npm build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x' # Standardize on one version for build steps
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application (npm run build)
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }} # Add if required by npm run build
        
    - name: Upload build artifacts (from npm run build)
      uses: actions/upload-artifact@v3
      with:
        name: app-build-files # Optional: if these files are needed by other jobs, e.g. a self-hosted deployment
        path: .next/

  e2e-test:
    runs-on: ubuntu-latest
    needs: build-app # Depends on the application being buildable by npm run build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
        E2E_TEST_USER_EMAIL: ${{ secrets.E2E_TEST_USER_EMAIL }} # For Playwright global setup
        E2E_TEST_USER_PASSWORD: ${{ secrets.E2E_TEST_USER_PASSWORD }} # For Playwright global setup

    - name: Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-app, e2e-test] # Deploy only if npm build and E2E tests pass
    if: github.ref == 'refs/heads/develop'
    
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Vercel Environment Information (Preview)
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts with Vercel (Preview)
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

    - name: Deploy Project Artifacts to Vercel (Preview)
      run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
        
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-app, e2e-test] # Deploy only if npm build and E2E tests pass
    if: github.ref == 'refs/heads/main'
    
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Vercel Environment Information (Production)
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts with Vercel (Production)
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: Deploy Project Artifacts to Vercel (Production)
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  security-scan: # This job can run in parallel
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: npm audit --audit-level=moderate # Adjust level as needed
      
    - name: Run dependency check
      uses: actions/dependency-review-action@v3
      # No if condition, let it run on pushes to main/develop too for visibility
      # if: github.event_name == 'pull_request'