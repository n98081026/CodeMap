import { describe, it, expect, vi, beforeEach } from 'vitest';

import {
  createClassroom,
  addStudentToClassroom,
  getClassroomsByTeacherId,
  deleteClassroom,
} from '@/services/classrooms/classroomService';
import { MOCK_TEACHER_USER, MOCK_STUDENT_USER } from '@/lib/config';

vi.mock('@/lib/supabaseClient');

import { supabase } from '@/lib/supabaseClient';

describe('Integration Test: Classroom Management Flow', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('should allow a teacher to create, manage, and delete a classroom', async () => {
    const newClassroomData = {
      name: 'CS 499: Senior Design',
      description: 'Capstone project course for computer science majors.',
    };
    const createdClassroomDb = {
      ...newClassroomData,
      id: 'class-499',
      teacher_id: MOCK_TEACHER_USER.id,
      invite_code: 'TEST123',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      enable_student_ai_analysis: true,
    };

    // Comprehensive mock for all service calls in the flow
    const fromMock = vi.fn().mockImplementation((table: string) => {
      // This mock will handle all calls and can be updated as the test progresses
      let mockDb: any = {};

      if (table === 'profiles') {
        mockDb = { data: MOCK_TEACHER_USER, error: null };
        return {
          select: vi.fn().mockReturnThis(),
          eq: vi.fn().mockReturnThis(),
          maybeSingle: vi.fn().mockResolvedValue(mockDb),
        };
      }
      if (table === 'classrooms') {
        return {
          insert: vi.fn().mockReturnThis(),
          select: vi.fn().mockReturnThis(),
          eq: vi.fn().mockReturnThis(),
          single: vi.fn().mockResolvedValue({ data: createdClassroomDb, error: null }),
          delete: vi.fn().mockResolvedValue({ count: 1, error: null }),
        };
      }
      if (table === 'classroom_students') {
        return {
          select: vi.fn().mockReturnThis(),
          insert: vi.fn().mockResolvedValue({ error: null }),
          delete: vi.fn().mockReturnThis(),
          eq: vi.fn().mockReturnThis(),
          maybeSingle: vi.fn().mockResolvedValue({ data: null, error: null }),
        };
      }
      return {};
    });
    (supabase.from as any).mockImplementation(fromMock);

    // 1. Teacher creates a classroom
    const resultClassroom = await createClassroom(
      newClassroomData.name,
      newClassroomData.description,
      MOCK_TEACHER_USER.id
    );
    expect(resultClassroom.name).toBe(newClassroomData.name);
    expect(resultClassroom.teacherId).toBe(MOCK_TEACHER_USER.id);

    // 2. Teacher adds a student to the classroom
    const addStudentResult = await addStudentToClassroom(resultClassroom.id, MOCK_STUDENT_USER.id);
    expect(addStudentResult).not.toBeNull();

    // 3. Teacher views their list of classrooms
    const fetchedClassrooms = await getClassroomsByTeacherId(MOCK_TEACHER_USER.id);
    expect(fetchedClassrooms.classrooms.length).toBe(1);
    expect(fetchedClassrooms.classrooms[0].name).toBe(newClassroomData.name);

    // 4. Teacher deletes the classroom
    const deleteResult = await deleteClassroom(resultClassroom.id, MOCK_TEACHER_USER.id);
    expect(deleteResult).toBe(true);
  });
});
