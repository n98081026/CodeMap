import React, { useState } from 'react'; // Added useState
import { getBezierPath, EdgeLabelRenderer, BaseEdge } from 'reactflow';
import { Button } from '@/components/ui/button';
import { Popover, PopoverTrigger, PopoverContent } from '@/components/ui/popover';
import { PlusCircleIcon, CheckCircle, XCircle } from 'lucide-react'; // Added more icons
import useConceptMapStore from '@/stores/concept-map-store';
import { v4 as uuidv4 } from 'uuid';
import { useToast } from '@/hooks/use-toast'; // Corrected import path

// Define the props for SuggestedEdge, extending basic edge props
interface SuggestedEdgeProps {
  // id is the suggestion's own ID from the store, not the React Flow edge ID
  // The React Flow edge ID will be `suggestion-${id}` as constructed in FlowCanvasCore
  id: string; // This is the actual React Flow element ID (e.g., "suggestion-XYZ")
  sourceX: number;
  sourceY: number;
  targetX: number;
  targetY: number;
  sourcePosition: string;
  targetPosition: string;
  style?: React.CSSProperties;
  markerEnd?: string;
  data: { // data is now non-optional and structured as per FlowCanvasCore
    suggestionId: string; // This is the original suggestion ID from the store
    suggestionData: {
      sourceNodeId: string;
      targetNodeId: string;
      label: string;
    };
    reason?: string;
  };
}

const SuggestedEdge: React.FC<SuggestedEdgeProps> = ({
  id, // This is the React Flow element id: `suggestion-${suggestionId}`
  sourceX,
  sourceY,
  targetX,
  targetY,
  sourcePosition,
  targetPosition,
  style = {},
  markerEnd,
  data, // Contains suggestionId, suggestionData, reason
}) => {
  const { addEdge, removeStructuralSuggestion } = useConceptMapStore.getState();
  const { toast } = useToast();
  const [popoverOpen, setPopoverOpen] = useState(false);

  const [edgePath, labelX, labelY] = getBezierPath({
    sourceX,
    sourceY,
    sourcePosition: sourcePosition as any,
    targetX,
    targetY,
    targetPosition: targetPosition as any,
  });

  const onAccept = () => {
    if (!data) return;
    // Ensure type for the new edge is appropriate, e.g., 'custom' or 'default'
    // For now, using 'orthogonal' as it's a known type in this project.
    // The actual edge ID for React Flow is generated by the store's addEdge if not provided.
    addEdge({
      // id: uuidv4(), // Store's addEdge should generate an ID
      source: data.suggestionData.sourceNodeId,
      target: data.suggestionData.targetNodeId,
      label: data.suggestionData.label,
      // type: 'custom', // Or 'orthogonal' or whatever default new edges should be
    });
    removeStructuralSuggestion(data.suggestionId); // Use the original suggestion ID from data
    toast({ title: "Suggestion applied", description: "Edge added to the map." });
    setPopoverOpen(false);
  };

  const onDismiss = () => {
    if (!data) return;
    removeStructuralSuggestion(data.suggestionId); // Use the original suggestion ID
    toast({ title: "Suggestion dismissed" });
    setPopoverOpen(false);
  };

  if (!data) return null; // Should not happen if data is correctly passed

  return (
    <>
      <BaseEdge path={edgePath} markerEnd={markerEnd} style={{ strokeDasharray: '5 5', stroke: '#888', ...style }} />
      <EdgeLabelRenderer>
        <div
          style={{
            position: 'absolute',
            transform: `translate(-50%, -50%) translate(${labelX}px,${labelY}px)`,
            pointerEvents: 'all',
          }}
          className="nodrag nopan"
        >
          <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                size="icon"
                className="bg-background hover:bg-secondary rounded-full shadow-md border-dashed border-primary"
                style={{ width: '24px', height: '24px' }}
                title={data.suggestionData.label || data.reason || "Review suggestion"}
              >
                <PlusCircleIcon className="h-4 w-4 text-primary" />
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-60 text-sm" side="bottom">
              <div className="space-y-2">
                <p className="font-semibold">Suggested Edge:</p>
                <p>"{data.suggestionData.label}"</p>
                {data.reason && (
                  <>
                    <p className="font-semibold mt-2">Reason:</p>
                    <p className="text-xs text-muted-foreground">{data.reason}</p>
                  </>
                )}
                <div className="flex justify-end space-x-2 pt-2">
                  <Button variant="outline" size="xs" onClick={onDismiss} title="Dismiss suggestion">
                    <XCircle className="h-4 w-4 mr-1" /> Dismiss
                  </Button>
                  <Button variant="default" size="xs" onClick={onAccept} title="Accept suggestion">
                    <CheckCircle className="h-4 w-4 mr-1" /> Accept
                  </Button>
                </div>
              </div>
            </PopoverContent>
          </Popover>
          {data.suggestionData.label && !popoverOpen && (
            <div
              className="text-xs text-muted-foreground ml-2 mt-1 absolute left-full whitespace-nowrap p-1 bg-background/80 rounded"
              style={{ transform: 'translateY(-50%)', top: '50%' }}
            >
              {data.suggestionData.label}
            </div>
          )}
        </div>
      </EdgeLabelRenderer>
    </>
  );
};

export default SuggestedEdge;
