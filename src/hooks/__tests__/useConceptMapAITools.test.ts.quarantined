import { act, renderHook, waitFor } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import type { Mock } from 'vitest';

import { useConceptMapAITools } from '../useConceptMapAITools';
import { act, renderHook } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import type { Mock } from 'vitest';

import { useConceptMapAITools } from '../useConceptMapAITools';

import * as aiFlows from '@/ai/flows';
import { useToast } from '@/hooks/use-toast';
import { useConceptMapStore } from '@/stores/concept-map-store';
import { ConceptMapNode } from '@/types';

// --- Mocks ---
// Mock dependencies
vi.mock('@/ai/flows', () => ({
  runFlow: vi.fn(),
}));

vi.mock('@/hooks/use-toast', () => ({
  useToast: vi.fn(),
}));

vi.mock('next/navigation', () => ({
  useRouter: () => ({
    push: vi.fn(),
  }),
}));

vi.mock('@/lib/dagreLayoutUtility', () => ({
  getNodePlacement: vi.fn(() => ({ x: 0, y: 0 })),
}));

vi.mock('@/lib/utils', () => ({
  generateUniqueId: vi.fn(() => 'unique-id'),
}));

vi.mock('@/hooks/use-toast');

vi.mock('@/stores/concept-map-store');

const mockNodeId = 'node-1';
const mockNode: ConceptMapNode = {
  id: mockNodeId,
  text: 'Test Node',
  details: 'Some details.',
  type: 'default',
  x: 0,
  y: 0,
};

describe('useConceptMapAITools', () => {
  let setStagedMapData: Mock;
  let addDebugLog: Mock;
  let toast: Mock;
  let mockSetState: Mock;

  beforeEach(() => {
    // Reset mocks before each test
    vi.clearAllMocks();

    // Setup mock implementations
    setStagedMapData = vi.fn();
    addDebugLog = vi.fn();
    toast = vi.fn().mockReturnValue({ id: 'toast-id' });
    mockSetState = vi.fn();

    // Mock the return value of the custom hooks
    (useToast as Mock).mockReturnValue({ toast });
    (useConceptMapStore as unknown as Mock).mockImplementation((selector: any) => {
      const state = {
        setStagedMapData,
        addDebugLog,
        mapData: { nodes: [mockNode], edges: [] },
        // Add any other state properties that the hook might need during the test
      };
      if (selector) {
        return selector(state);
      }
      return state;
    });

    // A simplified mock for the store's setState function if needed
    (useConceptMapStore as any).setState = mockSetState;
  });

  describe('handleExtractConcepts', () => {
    it('should call extractConcepts flow and stage data on success', async () => {
      // Arrange
      const mockExtractedData = {
        concepts: [{ text: 'concept1', reason: 'reason1' }],
      };
      vi.mocked(aiFlows.runFlow).mockResolvedValue(mockExtractedData);
      const { result } = renderHook(() => useConceptMapAITools());

      // Act
      await act(async () => {
        await result.current.handleExtractConcepts({ context: 'some context' });
      });

      // Assert
      expect(aiFlows.runFlow).toHaveBeenCalledWith('extractConcepts', { context: 'some context' });
      expect(setStagedMapData).toHaveBeenCalled();
      expect(toast).toHaveBeenCalledWith(expect.objectContaining({ title: 'Concepts Extracted' }));
    });

    it('should show an error toast on failure', async () => {
      // Arrange
      const error = new Error('AI extraction failed');
      vi.mocked(aiFlows.runFlow).mockRejectedValue(error);
      const { result } = renderHook(() => useConceptMapAITools());

      // Act
      await act(async () => {
        await result.current.handleExtractConcepts({ context: 'some context' });
      });

      // Assert
      expect(toast).toHaveBeenCalledWith(expect.objectContaining({
        title: 'Error Extracting Concepts',
        variant: 'destructive',
      }));
    });
  });

  describe('handleRewriteNodeContent', () => {
     it('should open the rewrite modal with correct content', async () => {

  beforeEach(() => {
    setStagedMapData = vi.fn();
    addDebugLog = vi.fn();
    toast = vi.fn().mockReturnValue({ id: 'toast-id' });

    (useConceptMapStore as unknown as Mock).mockReturnValue({
      setStagedMapData,
      addDebugLog,
      mapData: { nodes: [mockNode], edges: [] },
      // Add other store state/actions if needed by the hook
    });

    (useToast as unknown as Mock).mockReturnValue({ toast });
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  describe('handleExtractConcepts', () => {
    it('should call extractConceptsFlow and update staged data on success', async () => {
      const mockExtractedData = {
        concepts: [
          { text: 'concept1', reason: 'reason1' },
          { text: 'concept2', reason: 'reason2' },
        ],
      };
      vi.mocked(aiFlows.runFlow).mockResolvedValue(mockExtractedData);

      const { result } = renderHook(() => useConceptMapAITools());

      await act(async () => {
        await result.current.handleExtractConcepts({
          context: 'some context',
        });
      });

      expect(aiFlows.runFlow).toHaveBeenCalledWith('extractConcepts', {
        context: 'some context',
      });
      expect(setStagedMapData).toHaveBeenCalledWith({
        nodes: mockExtractedData.concepts.map((c: any) => ({
          id: expect.any(String),
          data: {
            label: c.text,
            details: c.reason,
          },
          type: 'ai-concept',
          position: { x: expect.any(Number), y: expect.any(Number) },
        })),
        edges: [],
        actionType: 'extractConcepts',
      });
      expect(toast).toHaveBeenCalledWith(
        expect.objectContaining({
          title: 'Concepts Extracted',
          description: 'Review the new concepts in the staging area.',
        })
      );
    });

    it('should show a toast message on failure', async () => {
      const error = new Error('AI failed');
      vi.mocked(aiFlows.runFlow).mockRejectedValue(error);

      const { result } = renderHook(() => useConceptMapAITools());

      await act(async () => {
        await result.current.handleExtractConcepts({
          context: 'some context',
        });
      });

      expect(toast).toHaveBeenCalledWith(
        expect.objectContaining({
          title: 'Error Extracting Concepts',
          description: error.message,
          variant: 'destructive',
        })
      );
    });
  });

  // Example for another function
  describe('handleRewriteNodeContent', () => {
    it('should open the rewrite modal with correct content', async () => {
      const { result } = renderHook(() => useConceptMapAITools());

      act(() => {
        result.current.openRewriteNodeContentModal(mockNodeId);
      });

      await waitFor(() => {
        expect(result.current.rewriteModalState.isOpen).toBe(true);
        expect(result.current.rewriteModalState.nodeId).toBe(mockNodeId);
      });
    });

    it('should call rewriteNodeContent flow and update state', async () => {
      // Arrange
      const mockRewrite = { rewrittenText: 'Rewritten content' };
      vi.mocked(aiFlows.runFlow).mockResolvedValue(mockRewrite);
      const { result } = renderHook(() => useConceptMapAITools());

      // Act
      act(() => {
        result.current.openRewriteNodeContentModal(mockNodeId);
      });
      expect(result.current.rewriteModalState.isOpen).toBe(true);
      expect(result.current.rewriteModalState.nodeId).toBe(mockNodeId);
      expect(result.current.rewriteModalState.originalContent).toBe(
        'Test Node\n\nSome details.'
      );
    });

    it('should call rewriteNodeContentFlow and update modal state', async () => {
      const mockRewrite = { rewrittenText: 'Rewritten content' };
      vi.mocked(aiFlows.runFlow).mockResolvedValue(mockRewrite);

      const { result } = renderHook(() => useConceptMapAITools());

      // First, open the modal
      act(() => {
        result.current.openRewriteNodeContentModal(mockNodeId);
      });

      // Then, trigger the rewrite
      await act(async () => {
        await result.current.handleRewriteNodeContent('concise');
      });

      // Assert
      expect(aiFlows.runFlow).toHaveBeenCalledWith('rewriteNode', expect.any(Object));
      await waitFor(() => {
         expect(result.current.rewriteModalState.rewrittenContent).toBe(mockRewrite.rewrittenText);
      });
      expect((aiFlows as any).runFlow).toHaveBeenCalledWith('rewriteNode', {
        text: 'Test Node\n\nSome details.',
        style: 'concise',
        customInstruction: undefined,
      });
      expect(result.current.rewriteModalState.rewrittenContent).toBe(
        mockRewrite.rewrittenText
      );
    });
  });
});
