'use server';
/**
 * @fileOverview This file defines a Genkit flow to generate a concept map from a project's code.
 *
 * - generateMapFromProject - A function that handles the concept map generation process.
 * - GenerateMapFromProjectInput - The input type for the generateMapFromProject function.
 * - GenerateMapFromProjectOutput - The return type for the generateMapFromProject function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateMapFromProjectInputSchema = z.object({
  projectDescription: z.string().describe(
    'A high-level description of the software project, its purpose, and main functionalities, ' +
    'often derived from the uploaded project archive name or user input.'
  ),
  projectCodeStructure: z.string().describe(
    "A textual representation of the project's analyzed directory and file structure. " +
    "Ideally, this is generated by a tool that inspects an uploaded project archive, " +
    "identifying key directories, main files, their primary exports/roles, and significant dependencies. " +
    "For example: 'Project: my-app.zip\\nsrc/ (contains: components/, services/)\\n  components/Button.tsx (exports: ButtonComponent)\\n  services/api.ts (imports: axios; exports: fetchData)'"
  ),
});
export type GenerateMapFromProjectInput = z.infer<typeof GenerateMapFromProjectInputSchema>;

const GenerateMapFromProjectOutputSchema = z.object({
  conceptMapData: z.string().describe('The concept map data in a well-formed JSON string format, representing nodes and edges. Node IDs must be unique strings.'),
});
export type GenerateMapFromProjectOutput = z.infer<typeof GenerateMapFromProjectOutputSchema>;

export async function generateMapFromProject(
  input: GenerateMapFromProjectInput
): Promise<GenerateMapFromProjectOutput> {
  return generateMapFromProjectFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateMapFromProjectPrompt',
  input: {schema: GenerateMapFromProjectInputSchema},
  output: {schema: GenerateMapFromProjectOutputSchema},
  prompt: `You are an expert software architect and system analyst specializing in creating insightful, Whimsical-style concept maps from analyzed project structures and descriptions.
Your task is to analyze the provided software project information (which would typically be extracted from an uploaded project archive by an analysis tool) and generate a concept map. This map should clearly represent its key architectural components, core functionalities, data entities, and their primary interrelationships in a conceptually organized manner.

Project Context (e.g., name, purpose):
{{{projectDescription}}}

Analyzed Project Code Structure (as provided by an analysis tool):
{{{projectCodeStructure}}}

Based on the above information, generate a concept map with the following characteristics:

1.  **Nodes**: Identify and represent the following conceptual elements based on the analyzed structure:
    *   **Key Features / User Stories**: High-level functionalities (e.g., "User Registration", "Map Creation"). Use type: 'key_feature'.
    *   **Core Architectural Components / Services**: Major logical blocks (e.g., "Authentication Service", "Data Engine"). Use type: 'service_component'.
    *   **Primary UI Views / Screens**: Significant UI elements (e.g., "Student Dashboard", "Map Editor"). Use type: 'ui_view'.
    *   **Data Models / Entities**: Important data structures (e.g., "User Profile", "Classroom Schema"). Use type: 'data_model'.
    *   **Key Modules / Libraries**: Distinct code modules or libraries (e.g., "API Client", "Validation Utils"). Use type: 'code_module'.
    *   **External Dependencies / APIs**: External services/APIs (e.g., "Payment API", "Cloud Storage"). Use type: 'external_dependency'.
    *   **User Roles**: Distinct user types (e.g., "Student", "Teacher"). Use type: 'user_role'.
    *   **Core Processes / Flows**: Important operational flows (e.g., "Submission Pipeline", "Map Generation"). Use type: 'core_process'.
    *   Focus on abstraction. Avoid overly granular nodes unless they represent a crucial concept.

2.  **Node Properties**: Each node MUST have:
    *   "id": A unique string identifier (e.g., "feat_user_login", "service_auth").
    *   "text": A concise, descriptive display label.
    *   "type": One of the suggested types above.
    *   "details" (optional): Brief explanation of purpose/responsibilities.

3.  **Relationships (Edges)**: Define meaningful, action-oriented relationships.
    *   Use descriptive labels like: 'triggers', 'uses_data_from', 'displays_info_for', 'manages_access_to', 'interacts_with_api'.
    *   Focus on primary relationships highlighting architecture, data flow, and user interaction.
    *   Each edge MUST have: "id" (unique), "source" (node id), "target" (node id), and "label".

4.  **Clarity, Conciseness, and Structure**:
    *   Prioritize 10-20 key nodes for a good overview unless the project is very large.
    *   The map should provide a clear, high-level understanding, like a well-designed Whimsical diagram.
    *   Consider logical groupings and flow.

5.  **Output Format**:
    *   You MUST output the concept map data as a single, well-formed JSON string.
    *   The JSON object must have two top-level keys: "nodes" (array of node objects) and "edges" (array of edge objects).
    *   Ensure all node "id" values are unique strings. Edges use these IDs.
    *   Pay close attention to correct JSON syntax.

Example JSON Output Structure:
{
  "nodes": [
    { "id": "feat_user_login", "text": "User Login Feature", "type": "key_feature", "details": "Handles user authentication." },
    { "id": "service_auth", "text": "Authentication Service", "type": "service_component", "details": "Manages credentials." }
  ],
  "edges": [
    { "id": "edge_1", "source": "feat_user_login", "target": "service_auth", "label": "uses_service" }
  ]
}

Analyze the provided project information and generate the concept map JSON data.
`,
});

const generateMapFromProjectFlow = ai.defineFlow(
  {
    name: 'generateMapFromProjectFlow',
    inputSchema: GenerateMapFromProjectInputSchema,
    outputSchema: GenerateMapFromProjectOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    // Basic validation attempt (can be more sophisticated)
    try {
      JSON.parse(output!.conceptMapData);
    } catch (e) {
      console.error("Generated conceptMapData is not valid JSON:", output?.conceptMapData);
      // Potentially throw or attempt to fix, or rely on schema validation if strict enough
    }
    return output!;
  }
);
